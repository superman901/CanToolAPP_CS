<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/Style.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <h2 id="3-1-">3.1　个人能力的衡量与发展</h2>

  <p>软件工程包括了什么呢？第1章提到：软件工程包括了开发、运营、维护软件的过程中的很多技术、做法、习惯和思想。软件工程把这些相关的技术和过程统一到一个体系中，叫“软件开发流程”，软件开发流程的目的是为了提高软件开发、运营、维护的效率，以及提升用户满意度、软件的可靠性和可维护性。软件开发流程不光指团队的流程，还包括个人开发流程，因为软件团队是由个人组成的。在团队的大流程中，是每一个具体的个人在做开发、测试、用户界面设计、管理、交流等工作。因此，个人在团队中也有独立的流程。把每个人的工作有序地组织起来，就是团队的流程。这里说的“有序”，并不是“无争论”。在大部分成功的软件团队模型中，各个角色（开发、测试、项目管理等）考虑问题的出发点是有区别的，不同意见的冲突在所难免，一个好的团队流程能把冲突的积极方面（各自尽力把自己的工作做好，说服别人）释放出来，而避免消极方面（因为冲突而产生的消极、抵触情绪等）。我们可以用足球来作一个比喻，足球队中有没有个人流程？当然有，职业足球队对于球员有很严格的要求，例如：体能、技术、意识、斗志具体技术有传接、盘带、射门、定位球、跑位，等等。对一些特定的角色（如守门员），还有独特的技术要求。足球队有没有流程？当然有：阵型、配合、临场应变足球队有不少“阵型”：442、433、451以及它们的各种变体。还有不少风格：南美、欧洲；技术、力量；小快灵、抢逼围、两翼齐飞、全攻全守，等等。然而，尽管有这么多理论，足球的每一次盘带、传球、跑动、射门、扑救，依然都是单个球员完成的。如果单个运动员的技术、体能不行 ，无论是什么阵型用处都不大，有些阵型还会起反作用，例如，让体力弱的球队去打全攻全守。足球队有没有交流？当然有，教练和球员之间、球员之间都有很频繁的交流，有战前的计划和训练，有事后的总结和分析，当然还有争论。软件团队和团队中的工程师也是这样。软件系统的绝大部分模块都是由个人开发或维护的。在软件工程的术语中，我们把这些单个的成员叫做Individ-ual Contributor（IC）。IC在团队中的流程是怎么样的呢？以开发人员为例，流程如下。</p>

  <ul>
    <li>通过交流、实验、快速原型等方法，理解问题、需求或任务</li>

    <li>提出多种解决办法并估计工作量</li>

    <li>其中包括寻找以前的解决方案，因为很多工作是重复性的</li>

    <li>与相关角色交流解决问题的提案，决定一个可行的方案</li>

    <li>执行，把想法变成实际中能工作的代码，同时验证方案的可行性和其他特性（例如程序的效能等）</li>

    <li>和团队的其他角色合作，在测试环境中测试实现方案，修复缺陷（Bug）。如果此方案有严重的问题，那么就考虑其他方案</li>

    <li>在解决方案发布出去之后，对结果负责每个人的工作质量直接影响最终软件的质量。</li>
  </ul>

  <p>软件工程师如何衡量、证明自己的能力？</p>

  <p>问：你是职业软件工程师么？</p>

  <p>答：是。</p>

  <p>问：你觉得你“职业”到哪一个程度？</p>

  <p>答：嗯，我在一个能发工资的地方上班，靠我的</p>

  <p>软件技术挣钱，所以我相当的职业。</p>

  <p>问：像职业篮球队员那样职业？</p>

  <p>答：差不多吧。</p>

  <p>问：职业篮球队员都有很详细的记录说明，例如，图3-1所示的网页说明了一个职业篮球队2010赛季队员们的场上表现。</p>

  <p><img alt="" src="../Images/3-1.jpg" /></p>

  <p>图3-1　衡量职业篮球运动员赛季表现的数据</p>

  <p>图表显示了队员出场次数、场上时间、命中率、篮板、助攻、抢断、盖帽、失误、犯规、得分、罚球命中率等[注释1]。作为一个职业软件工程师，你有类似的数据说明你所有的职业活动和成绩么？</p>

  <p>答：嗯……没有。唯一的数据是，我的“上场时间”还是挺长的，而且经常打加时赛—加班。什么样的数据能说明一个软件工程师的技术和能力呢？衡量能力有哪些参数？没有量化的指标，就谈不上衡量和比较。我们还是看看搬砖的伙计们，关于工作量，他们：</p>

  <ul>
    <li>有多少块砖？</li>

    <li>要搬多远？他们也有简单的指标衡量工作质量。</li>

    <li>多快搬完？</li>

    <li>搬的过程中损坏了多少块砖？</li>
  </ul>

  <p>那么，初级软件工程师如何成长呢？我认为有下面几种成长。</p>

  <p>1. 积累软件开发相关的知识，提升技术技能（如对具体技术的掌握，动手能力）。例如：对Java、C/C++、C#的掌握，诊断/提高效能的技术，对设备驱动程序（Device Driver）、内核调试器（Kernel Debugger）的掌握；对于某一开发平台的掌握。</p>

  <p>2. 积累问题领域的知识和经验（例如：对医疗或金融行业的了解）。第一点和第二点都可以在很多简历上都可以看到，也可以比较容易地检测出来。随着经验的增长，一个工程师可以掌握更广泛、更深入的技术和问题领域的知识。</p>

  <p>3. 对通用的软件设计思想和软件工程思想的理解。这一方面就比较虚，什么是好的软件设计思想？什么是好的软件工程思想？一个工程师开了博客，转发了很多别人的文章，这算有思想么？另一个工程师坚持做任何设计都要画UML图，这算有思想么？</p>

  <p>4. 提升职业技能（区别于技术技能）。职业技能包括：自我管理的能力，表达和交流的能力，与人合作的能力，按质按量完成任务的执行力，这些能力在IT行业和其他行业都很重要。</p>

  <p>5. 实际成果。绝大部分软件工程师的工作成果都是可以公开的，你参与的产品用户评价如何，市场占有率如何，对用户有多大价值？你在其中起了什么作用？</p>

  <p>行胜于言，这些实际的工作成果，是最重要的评价标准。软件开发的工作量和质量怎么衡量呢？PSP认为有下列4个因素：</p>

  <p>a . 项目/任务有多大？说明项目的大小，一般用代码行数（Line Of Code，LOC）来表示；也可以用功能点（Function Point）来表示。<br />
  b . 花了多少时间？可以用小时、天、月、年来表示。一组人所花费的时间可以用（人数×时间）来表示，例如某项目花费了10个人×月。<br />
  c . 质量如何？交付的代码中有多少缺陷？</p>

  <p>交付有两个定义</p>

  <ul>
    <li>在代码完成（Code Complete）时，交付给测试人员</li>

    <li>在软件最终发布时，交付给顾客可以用缺陷的数量来除以项目的大小。</li>
  </ul>

  <p>例如5Bugs / KLOC，意味着每千行程序有5个缺陷。也有人用试图用“re-work”来表示质量，例如：这1000行代码，从开始写到最后发布，一共修改了200行·次。另一组代码，从开始写到最后发布，一共修改了50行·次。那么改动少的代码最初质量高—因为re-work（返工）的次数少。笔者认为，re-work只是表明在软件开发过程中花费的时间，re-work的多寡并不跟最终的质量成正比关系。软件开发过程很大程度上是一个探索和实验的过程，不同的re-work能帮助工程师深入了解项目的各个难点，尽早交付原型，找到最优解决方案，等等。因此，re-work是有价值的。当然，如果一个程序员为了一个简单的问题而不断地re-work，其工作效率就不是太高—这可以用时间花费来衡量。d . 是否按时交付？软件/任务是否按时交付？这个看似简单，其实也有讲究。例如，当我们衡量一个程序员在一段时间内的交付情况时，我们是用简单的平均值呢，还是用方差来表示？看看下面这个例子。两个程序员Al和Bob。他们在两次项目中各自完成3个任务。平均值显示，Al完成任务的时间从10天减至7天；Bob从10天缩短至8天。看起来是Al更好？</p>

  <p><img alt="" src="../Images/3-0-1.jpg" /></p>

  <p>表3-1　两个程序员的交付对比</p>

  <p>在第一轮的工作中，Al和Bob都完成了3项估计为10天的工作，各自都用了5、10、15天。在三个月之后，Al和Bob接受了另外三项任务，Al的估计都是7天，他花了1、9、11天。平均用时是7天。Bob估计是8天，实际用了7、8、9天时间。从总用时来看，Al的平均用时比Bob少一天，似乎应该是稍稍优秀一些，但是从标准方差（Standard Deviation）来看，Al的方差是5.3，而Bob是1。显然Bob比Al的交付时间要稳定得多。在团队工作中，稳定、一致的交付时间是衡量一个员工能力的重要方面。软件项目的确需要创造性，需要一些意外，一些惊喜。但是，更多的是常规的、可重复的任务，软件工程的奠基人之一瓦茨·汉弗雷总结说，软件领域可以分为两个方面：一方面是技艺创新的大爆发；而另一方面是坚持不懈的工程工作，包括软件的改善、维护和测试等，这一方面占了90%—95%的比例。对于这些任务，一个成熟的软件工程师应该能够降低任务交付时间的标准方差。如果你能长时间稳定而按时地交付工作的结果，内部和外部的顾客就会对你的工作有信心，更喜欢与你合作。标准方差是六西格玛（Six Sigma）方法的核心概念，这也是杰克·韦尔奇在GE推行六西格玛的一大原因。</p>
</body>
</html>
