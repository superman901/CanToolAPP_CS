<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/Style.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <h2 id="3-4-">3.4　练习与讨论</h2>

  <p>更多内容与讨论请参见：<a href="http://www.cnblogs.com/xinz/p/3852172.html">http://www.cnblogs.com/xinz/p/3852172.html</a></p>

  <p>1. 选哪一种医生？</p>

  <p>作为一个软件工程师，你觉得自己表现如何？有没有这样的体会：看书的时候觉得“技止此耳”，开发项目的时候才觉得实际情况和书上讲的都有一些出入，一些重要的细节书上没有提。我们很多人是边看Asp.NET的书，边开发Asp.NET的项目，这相当于一边看医学书一边动手术……如果你是病人，你希望你的医生是下面的哪一种呢？</p>

  <p>a）刚刚在书上看到你的病例，开刀的过程中非常认真严谨，时不时还要停下来翻书看看……</p>

  <p>b）富有创新意识，开刀时突然想到一个新技术、新的刀法，然后马上在你身上试验……</p>

  <p>c）已经处理过很多类似的病例，可以一边给你开刀，一边和护士聊天说昨天晚上的《非诚勿扰》花絮……</p>

  <p>d）此医生无正式文凭或正式医院的认证，但是号称有秘方，可治百病。</p>

  <p>事实上，很多软件项目就是用a）或者b）这样的方法搞出来的。当然也有一些人走d）这条路。</p>

  <p>讨论：</p>

  <p>① 你要选哪种类型的医生？</p>

  <p>② 医生、药剂师、律师和很多行业都有职业考试和职业证书，软件工程师需要有正式的职业证书才能上岗么？</p>

  <p>2. 工程还是艺术</p>

  <p>软件开发是一门工程（Engineering），是一门艺术（Art），还是一门手艺（Craftmanship）？你如何衡量艺术家？如何衡量创造能力？如果是一门工程，那工程师要守规矩；如果是一门艺术，那艺术家要创新。</p>

  <ul>
    <li>写诗歌最多的人是谁？</li>

    <li>最有创造力的诗人是谁？一些最有影响力的作家，他们的作品都非常少，甚至只有一本，例如：</li>

    <li>《飘》（Gone with the Wind）作者 Margaret Mitchell[注释11]</li>

    <li>《红楼梦》，作者曹雪芹（这一本据说都没写完！）</li>
  </ul>

  <p>另外，优秀的作品往往并不符合所有“好”的标准。例如，找出下面这首词中重复的字：</p>

  <p>念奴娇·赤壁怀古——苏轼<br />
  大江东去，浪淘尽，千古风流人物。<br />
  故垒西边，人道是，三国周郎赤壁。<br />
  乱石崩云，惊涛裂岸，卷起千堆雪。<br />
  江山如画，一时多少豪杰。<br />
  遥想公谨当年，小乔初嫁了。<br />
  羽扇纶巾，谈笑间，樯橹灰飞烟灭。<br />
  故国神游，多情应笑我，早生华发。<br />
  人生如梦，一樽还酹江月。</p>

  <p>出现了三遍的字有：江，人；出现了两遍的字有：国，生，千，故，如。这符合“好词”的标准么？南宋人俞文豹评价道：今人看人文字，未论其大体如何，先且指点重字。软件设计工程师们在做代码复审的时候，是看“重复字”的多少，还是程序的艺术性？这个问题的另一个侧面是，在中国，一个成名的歌唱家往往出现在各种场合，演唱她当年成名的作品，观众们往往显得百听不厌。一个软件工程师就不能这样，在舞台上展现他当年写的“hello world”程序，或者是1.0的产品。为啥有这样的区别呢？</p>

  <p>3. 绞刑架和职业发展</p>

  <p>移山公司的人力资源总监给同学们做了职业发展的演讲，大意是随着软件工具和软件工程理论的发展，开发软件将会越来越容易，软件企业的水平都是CMMI4级以上。软件白领的生活指日可待，金领也不是梦，大家前途无可限量，学软件工程的同学越来越多，就是明证。大家纷纷鼓掌。最后他分享了一个故事：两个劫匪在亡命的路上看到一副绞刑架，劫匪小弟说，大哥，如果这世界上没有绞刑架，咱们的职业就好干多了。大哥说：你真笨！如果没有了它，这世上做劫匪的人怕是太多，我俩恐怕竞争不过同行，早就饿死了！请同学们思考这个故事对个人及软件业发展的启示。</p>

  <p>4. 案例——请写博客说明你的看法</p>

  <p>程序员小飞原计划三天完成某个任务，现在是第三天的下午，他马上就可以做完。但是在实现功能的过程中，他越来越意识到自己原来设计中的弱点，他应该采取另一个办法，才能避免后面集成阶段的额外工作。但是他如果现在就改弦更张，那势必要影响自己原来估计的准确性，并且会花费额外的时间，这样他的老板，同事也许会因此看不起他。如果他按部就班地按既定设计完成，最后整个团队还要花更多时间在后续集成上，但那就不是他个人的问题了。怎么办？</p>

  <p>5. 成长和代码量的关系</p>

  <p>软件工程师的工作就是写代码，相关专业的练习也是以阅读代码，写代码为主，那么代码量和工程师的水平是线性的关系么？这个问题有人还研究过：<br />
  <a href="http://www.techug.com/norris-numbers">http://www.techug.com/norris-numbers</a> （翻译）<br />
  <a href="http://www.teamten.com/lawrence/writings/norris-numbers.html">http://www.teamten.com/lawrence/writings/norris-numbers.html</a> （原文）<br />
  当代码是在2,000行以下，程序员可以用“写了再改”的蛮干方法，并且靠记忆力搞定一个程序，但是，如果你的代码规模达到20,000行，你要用结构化编程（类，模块，API，细节隐藏，面向对象的其他方法，等）来保证程序不变成一团乱麻。如果代码规模再大一个数量级，20万，200万呢？</p>

  <p>6. 学什么，怎么学，核心竞争力是什么？</p>

  <p>程序员经常在学习，交流，提高自己，怎样才是有效的学习方法呢？打字快就能写程序快么？哪一种语言、编辑器是最好的？最终我们这个行业的核心竞争力是什么？请看：<br />
  <a href="http://www.zhihu.com/question/27180582">http://www.zhihu.com/question/27180582</a><br />
  <a href="http://news.cnblogs.com/n/509554/">http://news.cnblogs.com/n/509554/</a><br />
  <a href="http://www.tuicool.com/articles/r6Vramr">http://www.tuicool.com/articles/r6Vramr</a><br />
  IT行业需要“好工程师”，这是一个检查表，请对照检查：<br />
  <a href="http://www.cnblogs.com/xinz/p/3852177.html">http://www.cnblogs.com/xinz/p/3852177.html</a></p>

  <p>7. 各式各样的工程师</p>

  <p>我们平时假设程序员都是身体完全健康的正常人，如果你身体有些缺陷，你还能做一名合格、甚至是优秀的工程师么？下面是两个例子：<br />
  <a href="http://blog.jobbole.com/21881/">http://blog.jobbole.com/21881/</a><br />
  <a href="http://blog.jobbole.com/12176/">http://blog.jobbole.com/12176/</a></p>

  <p>8. 对职业梯子（career ladder）的思考：<br />
  <a href="https://www.hakkalabs.co/articles/climbing-cto-ladder-fall-2">https://www.hakkalabs.co/articles/climbing-cto-ladder-fall-2</a></p>

  <p>9. 自知之明</p>

  <p>我们经常看到一些IT专业的同学，同事，或者专家对一些事情进行评论，并且表现得头头是道，他们真的懂多少，他们有自知之明么？你在刚学习某个语言或技术的时候，是否也有这种现象？<br />
  <a href="http://www.guokr.com/article/439517/">http://www.guokr.com/article/439517/</a><br />
  原文：<a href="http://www.psmag.com/health-and-behavior/confident-idiots-92793">http://www.psmag.com/health-and-behavior/confident-idiots-92793</a></p>

  <p>注释</p>

  <p>1. 参见：<a href="http://china.nba.com/stats/teams/teamStats/1610612745_2010_2_00.html">http://china.nba.com/stats/teams/teamStats/1610612745_2010_2_00.html</a></p>

  <p>2. 参见：<a href="http://sk.neea.edu.cn/jsjdj/index.jsp">http://sk.neea.edu.cn/jsjdj/index.jsp</a></p>

  <p>3. 参见：<a href="http://www.rkb.gov.cn/">http://www.rkb.gov.cn/</a></p>

  <p>4. 参见：<a href="http://en.wikipedia.org/wiki/Microsoft_Certified_Professional">http://en.wikipedia.org/wiki/Microsoft_Certified_Professional</a></p>

  <p>5. 参见：<a href="http://en.wikipedia.org/wiki/Oracle_Certification_Program">http://en.wikipedia.org/wiki/Oracle_Certification_Program</a></p>

  <p>6. 参见：<a href="http://www.ieee.org/education_careers/education/professional_certification/index.html">http://www.ieee.org/education_careers/education/professional_certification/index.html</a></p>

  <p>7. 参见：<a href="http://www.construx.com/uploadedFiles/Construx/Construx_Content/Resources/White_Papers/Construx%20Professional%20Dev%20Ladder.pdf">http://www.construx.com/uploadedFiles/Construx/Construx_Content/Resources/White_Papers/Construx%20Professional%20Dev%20Ladder.pdf</a></p>

  <p>8. 参见：<a href="http://pragprog.com/the-pragmatic-programmer/extracts/tips">http://pragprog.com/the-pragmatic-programmer/extracts/tips</a></p>

  <p>9. 参见：“软件天才与技术民工”<a href="http://blog.csdn.net/bitfan/article/details/6106212">http://blog.csdn.net/bitfan/article/details/6106212</a></p>

  <p>10. 参见：<a href="http://www.billbuxton.com/xc.html">http://www.billbuxton.com/xc.html</a></p>

  <p>11. 参见：<a href="http://en.wikipedia.org/wiki/Margaret_Mitchell">http://en.wikipedia.org/wiki/Margaret_Mitchell</a></p>
</body>
</html>
